name: Deploy Jekyll Site to GitHub Pages

on:
  push:
    branches:
      - "Test-build"
      - "main"

  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  JEKYLL_ENV: production
  RUBY_VERSION: '3.1.4'
  DEFAULT_GEMS: "jekyll jekyll-feed jekyll-seo-tag"
  DEFAULT_JEKYLL_VERSION: '4.3.2'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true # Enable Bundler caching for faster installs

      - name: Cache Jekyll Bundler and Cache
        uses: actions/cache@v4
        with:
          path: |
            vendor/bundle
            .jekyll-cache
          key: ${{ runner.os }}-gems-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Check for Gemfile
        id: gemfile_check
        uses: andymckay/gh-action-file-exists@main # Changed to 'main'
        with:
          path: Gemfile

      - name: Create Default Gemfile
        if: steps.gemfile_check.outputs.exists == 'false'
        run: |
          echo "source 'https://rubygems.org'" >> Gemfile
          echo "" >> Gemfile
          echo "# Essential Jekyll and SEO gems" >> Gemfile
          echo "gem 'jekyll', '${{ env.DEFAULT_JEKYLL_VERSION }}'" >> Gemfile
          for gem in ${{ env.DEFAULT_GEMS }}; do
            echo "gem '$gem'" >> Gemfile
          done
          echo "" >> Gemfile
          echo "# Common development and utility gems (you can adjust these)" >> Gemfile
          echo "gem 'jekyll-paginate'" >> Gemfile
          echo "gem 'jekyll-sitemap'" >> Gemfile
          echo "gem 'kramdown' # Or your preferred Markdown processor" >> Gemfile
          echo "" >> Gemfile
          echo "# If you have a Gemfile.lock, ensure it's committed to the repository" >> Gemfile
          echo "# 'bundle install' will create it if it doesn't exist" >> Gemfile
          echo "Created a default Gemfile with Jekyll ${{ env.DEFAULT_JEKYLL_VERSION }} and default gems including common utilities."

      - name: Install Dependencies
        run: |
          if [ -f Gemfile.lock ]; then
            bundle install --jobs 4 --retry 3 --path vendor/bundle
          else
            bundle install --jobs 4 --retry 3 --path vendor/bundle
            echo "Gemfile.lock created."
          fi

      - name: Run HTML Proofer (Optional - Add to Gemfile for it to work)
        if: ${{ github.event_name == 'push' }}
        run: bundle exec htmlproofer ./_site --internal-urls "['/']" --empty-alt-ignore
        continue-on-error: true # Allow the build to continue even if proofer finds issues

      - name: Build Jekyll Site
        run: |
          bundle exec jekyll build --destination ./_site --config _config.yml
        continue-on-error: true

      - name: Check Build Output
        id: check_build
        run: |
          if [ -d "_site" ]; then
            echo "BUILD_SUCCESS=true" >> "$GITHUB_OUTPUT"
          else
            echo "BUILD_SUCCESS=false" >> "$GITHUB_OUTPUT"
            echo "Jekyll build failed, skipping upload."
          fi

      - name: Upload Pages Artifact
        if: steps.check_build.outputs.BUILD_SUCCESS == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify on Deployment Status
        uses: actions/github-script@v6
        with:
          script: |
            const isSuccess = context.job.status === 'success';
            const message = isSuccess ? 'ðŸŽ‰ Your Jekyll site was successfully deployed to GitHub Pages!' : 'ðŸš¨ Deployment to GitHub Pages failed!';
            console.log(message);
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } else {
              console.log('Not a pull request, skipping comment.');
            }
